@model ShoppingCartModel
@using Nop.Core
@using Nop.Core.Domain.Tax
@using Nop.Core.Infrastructure
@using Nop.Web.Models.ShoppingCart;
@{
	var webHelper = EngineContext.Current.Resolve<IWebHelper>();
}
<div class="order-summary-content">
	@Html.Widget("order_summary_content_before")
	@Html.Partial("_OrderReviewData", Model.OrderReviewData)
	@if (Model.Items.Count > 0)
	{
		if (Model.Warnings.Count > 0)
		{
			<div class="message-error">
				<ul>
					@foreach (var warning in Model.Warnings)
					{
						<li>@warning</li>
					}
				</ul>
			</div>
		}
		@*we add enctype = "multipart/form-data" because "File upload" attribute control type requires it*@
	using (Html.BeginRouteForm("ShoppingCart", FormMethod.Post, new { enctype = "multipart/form-data", id = "shopping-cart-form" }))
	{
		@Html.AntiForgeryToken()
		<div class="row">
			<div class="col-xs-12 col-sm-12 col-md-8 tablist">
				<h2>Cart (2)</h2>
				<table cellspacing="0" cellpadding="0" class="cart m-t-lg">
					<colgroup>
						<col class="hidden-xs" width="1" />
						@if (Model.IsEditable)
						{
							<col class="hidden-xs" width="1" />
						}
						@if (Model.ShowSku)
						{
							<col class="hidden-xs" width="1" />
						}
						@if (Model.ShowProductImages)
						{
							<col width="1" />
						}
						<col />
						<col class="hidden-md hidden-lg" width="1" />
						<col width="1" />
						<col width="1" />
						<col width="1" />
					</colgroup>
					<thead>
						<tr class="cart-header-row">
							<th>
								<span class="item-count">#</span>
							</th>
							@if (Model.IsEditable)
							{
								<th class="remove-from-cart">
									@T("ShoppingCart.Remove")
								</th>
							}
							@if (Model.ShowSku)
							{
								<th class="sku">
									@T("ShoppingCart.SKU")
								</th>
							}
							@if (Model.ShowProductImages)
							{
								<th class="product-picture">
									@T("ShoppingCart.Image")
								</th>
							}
							<th class="product">
								@T("ShoppingCart.Product(s)")
							</th>
							<th class="unit-price hidden">
								@T("ShoppingCart.UnitPrice")
							</th>
							<th class="quantity">
								@T("ShoppingCart.Quantity")
							</th>
							<th class="subtotal hidden">
								@T("ShoppingCart.ItemTotal")
							</th>
						</tr>
					</thead>
					<tbody>
						@{var counter = 0;}
						@foreach (var item in Model.Items)
						{
							counter++;
							<tr class="cart-item-row">
								<td class="hidden-xs hidden-sm">
									<span class="item-count">@counter</span>
								</td>
								@if (Model.IsEditable)
								{
									<td class="remove-from-cart hidden-xs hidden-sm">
										@if (item.DisableRemoval)
										{
											<text>&nbsp;</text>
										}
										else
										{
											<input type="checkbox" name="removefromcart" value="@(item.Id)" />
										}
									</td>
								}
								@if (Model.ShowSku)
								{
									<td class="sku hidden-xs">
										@item.Sku
									</td>
								}
								@if (Model.ShowProductImages)
								{
									<td class="product-picture">
										<a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })"><img alt="@item.Picture.AlternateText" src="@item.Picture.ImageUrl" title="@item.Picture.Title" /></a>
									</td>
								}
								<td class="product">
									<a href="@Url.RouteUrl("Product", new { SeName = item.ProductSeName })" class="product-name">@item.ProductName</a>
									<div class="m-t-xs hidden-xs">
										<h3 class="product-subtotal">@item.SubTotal</h3>

									</div>
									@if (!String.IsNullOrEmpty(item.AttributeInfo))
									{
										<div class="attributes">
											@Html.Raw(item.AttributeInfo)
										</div>
									}
									@if (!String.IsNullOrEmpty(item.RecurringInfo))
									{
										<div class="recurring-info">
											@Html.Raw(item.RecurringInfo)
										</div>
									}
									@if (!String.IsNullOrEmpty(item.RentalInfo))
									{
										<div class="rental-info">
											@Html.Raw(item.RentalInfo)
										</div>
									}
									@if (Model.IsEditable && item.AllowItemEditing)
									{
										var editCartItemUrl = Url.RouteUrl("Product", new { SeName = item.ProductSeName });
										editCartItemUrl = webHelper.ModifyQueryString(editCartItemUrl, "updatecartitemid=" + item.Id, null);
										<div class="edit-item">
											<a href="@editCartItemUrl">@T("Common.Edit")</a>
										</div>
									}
									@if (item.Warnings.Count > 0)
									{
										<div class="message-error">
											<ul>
												@foreach (var warning in item.Warnings)
												{
													<li>@warning</li>
												}
											</ul>
										</div>
									}
									<div class="visible-xs visible-sm hidden-md hidden-lg mob-quantity-display">
										@if (Model.IsEditable)
										{
											if (item.AllowedQuantities.Count > 0)
											{
												<select name="itemquantity@(item.Id)" class="qty-dropdown">
													@foreach (var qty in item.AllowedQuantities)
													{
														<option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
													}
												</select>
											}
											else
											{
												<span class="decrease">-</span>
												<input name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" />
												<span class="increase">+</span>
											}
										}
										else
										{
											<span>@item.Quantity</span>
										}
									</div>
								</td>
								<td class="hidden-md hidden-lg remove-item-section">
									<div class="min-high">
										<input type="hidden" value="" name="removefromcart" />
										<input type="submit" name="updatecart" value="@(item.Id)" class="remove-from-cart" title="@T("ShoppingCart.Remove")" onclick="$('input[name=itemquantity@(item.Id)]').val('0');$('input[name=removefromcart]').val('@(item.Id)');" />
									</div>
									<div class="visible-xs visible-sm hidden-md hidden-lg mob-total-display">
										<span class="product-subtotal">@item.SubTotal</span>
										@if (!String.IsNullOrEmpty(item.Discount))
										{
											<div class="discount">
												@T("ShoppingCart.ItemYouSave", item.Discount)
											</div>
											if (item.MaximumDiscountedQty.HasValue)
											{
												<div class="discount-additional-info">
													@T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
												</div>
											}
										}
									</div>

								</td>
								<td class="unit-price hidden">
									<span class="product-unit-price">@item.UnitPrice</span>
								</td>
								<td class="hidden-xs hidden-sm quantity">
									@if (Model.IsEditable)
									{
										if (item.AllowedQuantities.Count > 0)
										{
											<select name="itemquantity@(item.Id)" class="qty-dropdown">
												@foreach (var qty in item.AllowedQuantities)
												{
													<option selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
												}
											</select>
										}
										else
										{
											<span class="decrease">-</span>
											<input name="itemquantity@(item.Id)" type="text" value="@(item.Quantity)" class="qty-input" />
											<span class="increase">+</span>
										}
									}
									else
									{
										<span>@item.Quantity</span>
									}
								</td>
								<td class="hidden-xs hidden-sm subtotal hidden">
									<span class="product-subtotal">@item.SubTotal</span>
									@if (!String.IsNullOrEmpty(item.Discount))
									{
										<div class="discount">
											@T("ShoppingCart.ItemYouSave", item.Discount)
										</div>
										if (item.MaximumDiscountedQty.HasValue)
										{
											<div class="discount-additional-info">
												@T("ShoppingCart.MaximumDiscountedQty", item.MaximumDiscountedQty.Value)
											</div>
										}
									}
								</td>
							</tr>
						}
					</tbody>
				</table>
				<div>
					<div class="cart-options">
						@if (Model.IsEditable)
						{
						<div class="common-buttons">
							<button type="submit" name="updatecart" value="@T("ShoppingCart.UpdateCart")" class="btnWhite">
								<span>@T("ShoppingCart.UpdateCart")</span>
							</button>

						</div>
						}
						@if (Model.IsEditable)
						{
						@Html.Partial("_CheckoutAttributes", Model.CheckoutAttributes, new ViewDataDictionary())
						}
						@if (!String.IsNullOrEmpty(Model.CheckoutAttributeInfo))
						{
						<div class="selected-checkout-attributes">
							@Html.Raw(Model.CheckoutAttributeInfo)
						</div>
						}
					</div>
				</div>
				<hr class="hidden-md hidden-lg spacer" />
				<div class="cart-footer">
					@Html.Widget("order_summary_cart_footer")
					@if (Model.IsEditable)
					{
						<div class="couponbox">
							<div class="dealsbox">
								@Html.Partial("_DiscountBox", Model.DiscountBox)
								@Html.Partial("_GiftCardBox", Model.GiftCardBox)
								@Html.Widget("order_summary_content_deals")
							</div>
							@Html.Partial("EstimateShipping", Model.EstimateShipping)
						</div>
					}

				</div>
			</div>
			<hr class="hidden-md hidden-lg spacer" />
			<div class="col-md-4 totalbox">

				<div class="totals">
					<h2 class="m-b-lg">Price Details</h2>
					@Html.Action("OrderTotals", "ShoppingCart", new { isEditable = Model.IsEditable })
					@if (Model.IsEditable)
					{
						if (!String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
						{
							<div class="min-amount-warning">
								@Model.MinOrderSubtotalWarning
							</div>
						}
					}
					@if (Model.IsEditable)
					{
						<div class="tac text-center">
							@T("Checkout.TermsOfService.IAccept")
							<a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
						</div>
						if (Model.TermsOfServiceOnShoppingCartPage)
						{
							<div id="terms-of-service-warning-box" title="@T("Checkout.TermsOfService")" style="display:none;">
								<p>@T("Checkout.TermsOfService.PleaseAccept")</p>
							</div>
							<div class="terms-of-service">
								<input id="termsofservice" type="checkbox" name="termsofservice" />
								<label for="termsofservice">
									@T("Checkout.TermsOfService.IAccept")
									<a class="read" id="read-terms">@T("Checkout.TermsOfService.Read")</a>
								</label>
								<script>
									$(document).ready(function () {
										$('#read-terms').on('click', function (e) {
											e.preventDefault();
											displayPopupContentFromUrl('@Url.RouteUrl("TopicPopup", new {SystemName = "conditionsofuse"})', '@T("Checkout.TermsOfService")');
										});
									});
								</script>
							</div>
						}
						<div class="checkout-buttons">
							@if (String.IsNullOrEmpty(Model.MinOrderSubtotalWarning) && !Model.HideCheckoutButton)
							{
								<script type="text/javascript">
									$(document).ready(function () {
										$('#checkout').click(function () {
											//terms of service
											var termOfServiceOk = true;
											if ($('#termsofservice').length > 0) {
												//terms of service element exists
												if (!$('#termsofservice').is(':checked')) {
													$("#terms-of-service-warning-box").dialog();
													termOfServiceOk = false;
												} else {
													termOfServiceOk = true;
												}
											}
											return termOfServiceOk;
										});
									});
								</script>
								<div class="flt-checkout">
									<button type="submit" id="checkout" name="checkout" value="checkout" class="button-1 checkout-button">
										<span>@T("Checkout.Button")</span>
									</button>
									<button type="submit" name="continueshopping" value="@T("ShoppingCart.ContinueShopping")" class="btnWhite hidden">
										<span>@T("ShoppingCart.ContinueShopping")</span>
									</button>
								</div>
							}
						</div>
						var addonButtonsHtml = Html.Partial("_ButtonPaymentMethod", Model);
						if (!MvcHtmlString.IsNullOrEmpty(addonButtonsHtml))
						{
							<div class="addon-buttons">
								@*Payment method buttons (e.g. GoogleCheckoutButton, Paypal Express)*@
								@addonButtonsHtml
							</div>
						}
						<div class="m-t-lg text-center">
							<i class="flaticon-security-1"></i><br />
							<span>100% safe &amp; secure payments</span>
						</div>
					}
				</div>
			</div>
		</div>
		<div class="table-wrapper hidden">

		</div>
							if (Model.IsEditable && Model.Items.Count > 0 && Model.DisplayTaxShippingInfo)
							{
								var inclTax = EngineContext.Current.Resolve<IWorkContext>().TaxDisplayType == TaxDisplayType.IncludingTax;
								//tax info is already included in the price (incl/excl tax). that's why we display only shipping info here
								//of course, you can modify appropriate locales to include VAT info there
								<div class="tax-shipping-info">
									@T(inclTax ? "ShoppingCart.TaxShipping.InclTax" : "ShoppingCart.TaxShipping.ExclTax", Url.RouteUrl("Topic", new { SeName = Html.GetTopicSeName("shippinginfo") }))
								</div>
									}


								}
							}
							else
							{
								<div class="no-data text-center" style="padding:120px 0;">
									<div class="title">
										<div class="complete m-b"><i class="flaticon-commerce"></i></div>
										<h1>@T("ShoppingCart.CartIsEmpty")</h1>
									</div>
								</div>
							}
	@Html.Widget("order_summary_content_after")
</div>
@if (Model.IsEditable)
{
	@Html.Action("CrossSellProducts", "Product")
}